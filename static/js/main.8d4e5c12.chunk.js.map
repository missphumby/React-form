{"version":3,"sources":["Form.js","App.js","serviceWorker.js","index.js"],"names":["Form","this","props","account","firstname","lastname","email","gender","visit","handleChange","handleSubmit","mode","className","style","width","margin","border","padding","onSubmit","action","htmlFor","type","id","value","name","onChange","required","placeholder","checked","Component","App","state","users","editData","e","target","setState","resetFormState","preventDefault","profileData","length","prevState","map","user","updateUser","data","deleteUser","index","splice","minHeight","i","key","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8d4e5c12.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Form extends Component {\r\n  render() {\r\n    const { firstname, lastname, email, gender, visit } = this.props.account;\r\n    const { handleChange, handleSubmit, mode } = this.props;\r\n\r\n    return (\r\n      <div\r\n        className=\"container mt-2\"\r\n        style={{ width: \"60%\", margin: \"0 auto\", border: \"1px solid black\" }}\r\n      >\r\n        <form\r\n          className=\"form-horizontal\"\r\n          style={{ padding: \"10px\" }}\r\n          onSubmit={handleSubmit}\r\n          action=\"\"\r\n        >\r\n          <div className=\"form-group row\">\r\n            <label\r\n              className=\"control-label col-sm-2 text-right\"\r\n              htmlFor=\"email\"\r\n            >\r\n              Firstname:\r\n            </label>\r\n            <div className=\"col-sm-10\">\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                id=\"firstname\"\r\n                value={firstname}\r\n                name=\"firstname\"\r\n                onChange={handleChange}\r\n                required\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"form-group row\">\r\n            <label\r\n              className=\"control-label col-sm-2 text-right\"\r\n              htmlFor=\"email\"\r\n            >\r\n              Lastname:\r\n            </label>\r\n            <div className=\"col-sm-10\">\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                id=\"lastname\"\r\n                value={lastname}\r\n                name=\"lastname\"\r\n                onChange={handleChange}\r\n                required\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"form-group row\">\r\n            <label\r\n              className=\"control-label col-sm-2 text-right\"\r\n              htmlFor=\"email\"\r\n            >\r\n              Email:\r\n            </label>\r\n            <div className=\"col-sm-10\">\r\n              <input\r\n                type=\"email\"\r\n                // style={{marginLeft: \"15px\"}}\r\n                className=\"form-control\"\r\n                id=\"email\"\r\n                placeholder=\"Enter email\"\r\n                value={email}\r\n                name=\"email\"\r\n                onChange={handleChange}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"form-group row\">\r\n            <label className=\"control-label col-sm-2\" htmlFor=\"email\">\r\n              Gender:\r\n            </label>\r\n            <div className=\" col-sm-10\">\r\n              <select\r\n                id=\"gender\"\r\n                onChange={handleChange}\r\n                name=\"gender\"\r\n                value={gender}\r\n              >\r\n                <option value=\"\"></option>\r\n                <option value=\"Male\">Male</option>\r\n                <option value=\"Female\">female</option>\r\n              </select>\r\n            </div>\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <div className=\"col-sm-offset-2 col-sm-10\">\r\n              <div className=\"toggle-switch\">\r\n                <label>\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    name=\"visit\"\r\n                    className=\"toggle-switch-checkbox\"\r\n                    checked={visit}\r\n                    onChange={handleChange}\r\n                  />\r\n                  &nbsp;Recently came to Nigeria within the last 14 days?\r\n                </label>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"form-group\">\r\n            <div className=\"col-sm-offset-2 col-sm-10\">\r\n              <button type=\"submit\" name=\"submit\" className=\"btn btn-primary\">\r\n                {mode}\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;\r\n","import React, { Component } from \"react\";\nimport Form from \"./Form\";\nimport './styles.css'\n\nclass App extends Component {\n  state = {\n    users: [\n      {\n        id: 1,\n        firstname: \"David\",\n        lastname: \"Guerrero\",\n        email: \"david_xc3@hotmail.com\",\n        gender: \"Male\",\n        visit: false,\n      },\n    ],\n    editData: {},\n    account: {\n      firstname: \"\",\n      lastname: \"\",\n      email: \"\",\n      gender: \"\",\n      visit: false,\n    },\n    mode: \"Submit\",\n  };\n  \n\n  handleChange = (e) => {\n    const value = e.target[e.target.type === \"checkbox\" ? \"checked\" : \"value\"];\n    const name = e.target.name;\n\n    const account = { ...this.state.account };\n    account[name] = value;\n\n    this.setState({ account });\n  };\n\n  resetFormState = () => {\n    this.setState({\n      account: {\n        firstname: \"\",\n        lastname: \"\",\n        email: \"\",\n        gender: \"\",\n        visit: false,\n      },\n    });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    const profileData = { ...this.state.account };\n    if (this.state.mode === \"Submit\") {\n      profileData.id = this.state.users.length + 1;\n      this.setState((prevState) => ({ users: [...prevState.users, profileData] }));\n      this.resetFormState();\n    } else if (this.state.mode === \"Update\") {\n      let users = [...this.state.users];\n      users = users.map((user) =>\n        user.id === this.state.editData.id ? profileData : user\n      );\n      this.setState({ users, mode: \"Submit\" });\n      this.resetFormState();\n    }\n  };\n\n  updateUser = (data) => {\n    this.setState({ account: data, mode: \"Update\", editData: data });\n  };\n\n  deleteUser = (index) => {\n    let { users } = this.state;\n    users.splice(index, 1);\n    this.setState({\n      users: [...users],\n    });\n  };\n\n  render() {\n    const { users, editData, account, mode } = this.state;\n\n    return (\n      <div\n        className=\"container foo\"\n        style={{\n          width: \"50%\",\n          border: \"6px outset gainsboro\",\n          minHeight: \"100vh\",\n        }}\n      >\n        <Form\n          handleSubmit={this.handleSubmit}\n          editData={editData}\n          account={account}\n          handleChange={this.handleChange}\n          mode={mode}\n        />\n        <table className=\"table table-stripped table-responsive table-hover mt-3\">\n          <thead className=\"table-secondary\">\n            <tr>\n              <th>Name</th>\n              <th>Email Address</th>\n              <th>Gender</th>\n              <th>Came to Nigeria within the last 14 days</th>\n              <th></th>\n              <th></th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {users.map((user, i) => {\n              return (\n                <tr key={i}>\n                  <td>\n                    {user.firstname} {user.lastname}\n                  </td>\n                  <td>{user.email}</td>\n                  <td>{user.gender}</td>\n                  <td>{user.visit ? \"Yes\" : \"No\"}</td>\n                  <td>\n                    <button onClick={() => this.updateUser(user)}>Edit</button>\n                  </td>\n                  <td>\n                    <button onClick={() => this.deleteUser(i)}>Delete</button>\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}